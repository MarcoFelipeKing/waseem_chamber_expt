geom_point(aes(x=air,y=surface,colour=position))+
geom_smooth(aes(x=air,y=surface,colour=position),method="lm")+
facet_grid(~ach,scales="free")+
scale_y_continuous(trans="log10")+
scale_x_continuous(trans="log10")+
ylab("Surface concentration")+
xlab("Airborne concentration")+
scale_color_brewer(palette = "Set1")+
hrbrthemes::theme_ipsum()+
theme(legend.position="")->a
df %>%
ggplot()+
geom_point(aes(x=time_min,y=air,colour=position))+
# geom_line(aes(x=time_min,y=surface,colour=as.factor(repeticion)))
geom_smooth(aes(x=time_min,y=air,colour=position),method="lm")+
facet_grid(~ach)+
scale_y_continuous(trans="log10")+
# scale_x_continuous(trans="log10")+
ylab("Air concentration (cfu m3)")+
xlab("Time (minutes)")+
scale_color_brewer(palette = "Set1")+
hrbrthemes::theme_ipsum()+
theme(legend.position="") ->b
ggpubr::ggarrange(a,b,nrow = 2)
951.4/(32.25*0.2622)
951.4/(32.25*0.1)
df %>%
ggplot()+
geom_point(aes(x=time_min,y=surface,colour=position))+
# geom_line(aes(x=time_min,y=surface,colour=as.factor(repeticion)))
geom_smooth(aes(x=time_min,y=surface,colour=position),method="lm")+
facet_grid(~ach)+
scale_y_continuous(trans="log10")+
# scale_x_continuous(trans="log10")+
ylab("Surface concentration (¿¿)")+
xlab("Time (minutes)")+
scale_color_brewer(palette = "Set1")+
hrbrthemes::theme_ipsum()+
theme(legend.position="")
data_M_3_1
1000/0.1
3e1
a
b
366/0.08
900/(32.25*0.01)
1e-2
366/0.5
1e5*0.22*65
1e5*0.22/60
C_star <- function(parameters){
E=parameters[[1]]
l=parameters[[2]]
C=E/(32.25*l)
return(rep(C,5))
}
# set.seed(seed = TRUE)
.Random.seed <- a
#set up empty distances vector
distances<-c()
precision=5000 #this is delta t
sample_size = 200
#parameter_sample <- c()
parameter_sample<- matrix(data=NA,nrow=1,ncol=5)
total_trials=0  #Starts the counter of run trials
accepted_trials=0 #Starts the counter for accepted trial numbers, don't change
#Loop to sample values until met the sample size
while (NROW(parameter_sample) <= sample_size){
#foreach(total_trials=1:2, .packages=c("deSolve")) %dopar% {
# The prior distributions we use are d ~ U(0.001,10.0), C ~ U(200,1200), r ~ U(0.001,1.0), g ~ U(0.001,1.0).
# We begin by sampling from these distributions and simulating the process
trial_E = runif(1,1E2,1e3) #E= 10^5 cfu/ml * 0.22 ml/min
trial_l_3_1 = runif(1,1e-3,1e-1)
trial_l_3_2 = runif(1,1e-3,1e-1)
trial_l_6_1 = runif(1,1e-3,1e-1)
trial_l_6_2 = runif(1,1e-3,1e-1)
total_trials=total_trials+1.0
#print(total_trials)
parameters_3_1=c(E=trial_E,
l_3_1=trial_l_3_1)
parameters_3_2=c(E=trial_E,
l_3_2=trial_l_3_2)
parameters_6_1=c(E=trial_E,
l_6_1=trial_l_6_1)
parameters_6_2=c(E=trial_E,
l_6_2=trial_l_6_2)
#Learn data from 3_1
one_run = C_star(parameters = parameters_3_1)
euclidean_distance = abs(dist(rbind(one_run,data_M_3_1)))
#Learn data from 3_2
one_run = C_star(parameters = parameters_3_2)
euclidean_distance = abs(dist(rbind(one_run,data_M_3_2)))+euclidean_distance
#Learn data from 6_1
one_run = C_star(parameters = parameters_6_1)
euclidean_distance = abs(dist(rbind(one_run,data_M_6_1)))+euclidean_distance
#Learn data from 6_2
one_run = C_star(parameters = parameters_6_2)
euclidean_distance = abs(dist(rbind(one_run,data_M_6_2)))+euclidean_distance
# parameters <- c(C = trial_C, d = trial_d, g=trial_g,r=trial_r); #For C code
# one_run = deterministic_run(precision,initial_contamination,parameters)#
# Now we find the Euclidean distance between the simulated output and the
# experimental results. delta is the threshold that the Euclidean distance
# must be less than for us to accept the trial parameters into our sample.
delta = 32000#dictates distance
#Distance(one_run, experimental_data,s)# #Distance(one_run, experimental_data,s)#_noP2)
#print(euclidean_distance)# print(parameter_sample,euclidean_distance)
#print(total_trials)
if (euclidean_distance < delta){
#parameter_sample = parameter_sample[!is.na(parameter_sample)];
parameter_sample=rbind(parameter_sample, c(trial_E,trial_l_3_1,trial_l_3_2,trial_l_6_1,trial_l_6_1))
distances=rbind(distances,euclidean_distance)
accepted_trials=accepted_trials+1.0
print(paste0("Trial number accepted: ",accepted_trials))
}
#else{
#  print(euclidean_distance)
#  }
}
#set up empty distances vector
distances<-c()
precision=5000 #this is delta t
sample_size = 200
#parameter_sample <- c()
parameter_sample<- matrix(data=NA,nrow=1,ncol=5)
total_trials=0  #Starts the counter of run trials
accepted_trials=0 #Starts the counter for accepted trial numbers, don't change
#Loop to sample values until met the sample size
while (NROW(parameter_sample) <= sample_size){
#foreach(total_trials=1:2, .packages=c("deSolve")) %dopar% {
# The prior distributions we use are d ~ U(0.001,10.0), C ~ U(200,1200), r ~ U(0.001,1.0), g ~ U(0.001,1.0).
# We begin by sampling from these distributions and simulating the process
trial_E = runif(1,1E2,1e3) #E= 10^5 cfu/ml * 0.22 ml/min
trial_l_3_1 = runif(1,1e-3,1e-1)
trial_l_3_2 = runif(1,1e-3,1e-1)
trial_l_6_1 = runif(1,1e-3,1e-1)
trial_l_6_2 = runif(1,1e-3,1e-1)
total_trials=total_trials+1.0
#print(total_trials)
parameters_3_1=c(E=trial_E,
l_3_1=trial_l_3_1)
parameters_3_2=c(E=trial_E,
l_3_2=trial_l_3_2)
parameters_6_1=c(E=trial_E,
l_6_1=trial_l_6_1)
parameters_6_2=c(E=trial_E,
l_6_2=trial_l_6_2)
#Learn data from 3_1
one_run = C_star(parameters = parameters_3_1)
euclidean_distance = abs(dist(rbind(one_run,data_M_3_1)))
#Learn data from 3_2
one_run = C_star(parameters = parameters_3_2)
euclidean_distance = abs(dist(rbind(one_run,data_M_3_2)))+euclidean_distance
#Learn data from 6_1
one_run = C_star(parameters = parameters_6_1)
euclidean_distance = abs(dist(rbind(one_run,data_M_6_1)))+euclidean_distance
#Learn data from 6_2
one_run = C_star(parameters = parameters_6_2)
euclidean_distance = abs(dist(rbind(one_run,data_M_6_2)))+euclidean_distance
# parameters <- c(C = trial_C, d = trial_d, g=trial_g,r=trial_r); #For C code
# one_run = deterministic_run(precision,initial_contamination,parameters)#
# Now we find the Euclidean distance between the simulated output and the
# experimental results. delta is the threshold that the Euclidean distance
# must be less than for us to accept the trial parameters into our sample.
delta = 3200#dictates distance
#Distance(one_run, experimental_data,s)# #Distance(one_run, experimental_data,s)#_noP2)
#print(euclidean_distance)# print(parameter_sample,euclidean_distance)
#print(total_trials)
if (euclidean_distance < delta){
#parameter_sample = parameter_sample[!is.na(parameter_sample)];
parameter_sample=rbind(parameter_sample, c(trial_E,trial_l_3_1,trial_l_3_2,trial_l_6_1,trial_l_6_1))
distances=rbind(distances,euclidean_distance)
accepted_trials=accepted_trials+1.0
print(paste0("Trial number accepted: ",accepted_trials))
}
#else{
#  print(euclidean_distance)
#  }
}
1e3/(32.25*1e-3)
head(df)
1e3/(32.25*1e-2)
1e3/(32.25*1e-3)
1e3/(32.25*1e-1)
1e3/(32.25*1e-2)
data_M_3_1
#set up empty distances vector
distances<-c()
precision=5000 #this is delta t
sample_size = 200
#parameter_sample <- c()
parameter_sample<- matrix(data=NA,nrow=1,ncol=5)
total_trials=0  #Starts the counter of run trials
accepted_trials=0 #Starts the counter for accepted trial numbers, don't change
#Loop to sample values until met the sample size
while (NROW(parameter_sample) <= sample_size){
#foreach(total_trials=1:2, .packages=c("deSolve")) %dopar% {
# The prior distributions we use are d ~ U(0.001,10.0), C ~ U(200,1200), r ~ U(0.001,1.0), g ~ U(0.001,1.0).
# We begin by sampling from these distributions and simulating the process
trial_E = runif(1,1E2,1e3) #E= 10^5 cfu/ml * 0.22 ml/min
trial_l_3_1 = runif(1,1e-3,1e-1)
trial_l_3_2 = runif(1,1e-3,1e-1)
trial_l_6_1 = runif(1,1e-3,1e-1)
trial_l_6_2 = runif(1,1e-3,1e-1)
total_trials=total_trials+1.0
#print(total_trials)
parameters_3_1=c(E=trial_E,
l_3_1=trial_l_3_1)
parameters_3_2=c(E=trial_E,
l_3_2=trial_l_3_2)
parameters_6_1=c(E=trial_E,
l_6_1=trial_l_6_1)
parameters_6_2=c(E=trial_E,
l_6_2=trial_l_6_2)
#Learn data from 3_1
one_run = C_star(parameters = parameters_3_1)
euclidean_distance = abs(dist(rbind(one_run,data_M_3_1)))
#Learn data from 3_2
one_run = C_star(parameters = parameters_3_2)
euclidean_distance = abs(dist(rbind(one_run,data_M_3_2)))+euclidean_distance
#Learn data from 6_1
one_run = C_star(parameters = parameters_6_1)
euclidean_distance = abs(dist(rbind(one_run,data_M_6_1)))+euclidean_distance
#Learn data from 6_2
one_run = C_star(parameters = parameters_6_2)
euclidean_distance = abs(dist(rbind(one_run,data_M_6_2)))+euclidean_distance
# parameters <- c(C = trial_C, d = trial_d, g=trial_g,r=trial_r); #For C code
# one_run = deterministic_run(precision,initial_contamination,parameters)#
# Now we find the Euclidean distance between the simulated output and the
# experimental results. delta is the threshold that the Euclidean distance
# must be less than for us to accept the trial parameters into our sample.
delta = 5000#dictates distance
#Distance(one_run, experimental_data,s)# #Distance(one_run, experimental_data,s)#_noP2)
#print(euclidean_distance)# print(parameter_sample,euclidean_distance)
#print(total_trials)
if (euclidean_distance < delta){
#parameter_sample = parameter_sample[!is.na(parameter_sample)];
parameter_sample=rbind(parameter_sample, c(trial_E,trial_l_3_1,trial_l_3_2,trial_l_6_1,trial_l_6_1))
distances=rbind(distances,euclidean_distance)
accepted_trials=accepted_trials+1.0
print(paste0("Trial number accepted: ",accepted_trials))
}
#else{
#  print(euclidean_distance)
#  }
}
parameter_sample<-parameter_sample[order(distances), ]
parameter_sample<-parameter_sample%>%as.data.frame()#%>%set_colnames(c("r", "C", "d","g","l"))
colnames(parameter_sample)<-c("E", "l_3_1","l_3_2","l_6_1","l_6_2")
# return(parameter_sample)
print(paste("Summary of distances: ",distances %>% summary()))
print(paste("Percentage of accepted trials: ",accepted_trials/total_trials*100))
temp.list %>%
bind_rows() %>%
drop_na() %>%
unnest()  ->parameter_sample
summary(parameter_sample)
NROW(parameter_sample)
summary(distances)
NROW(distances)
#set up empty distances vector
distances<-c()
precision=5000 #this is delta t
sample_size = 200
#parameter_sample <- c()
parameter_sample<- matrix(data=NA,nrow=1,ncol=5)
total_trials=0  #Starts the counter of run trials
accepted_trials=0 #Starts the counter for accepted trial numbers, don't change
#Loop to sample values until met the sample size
while (NROW(parameter_sample) <= sample_size){
#foreach(total_trials=1:2, .packages=c("deSolve")) %dopar% {
# The prior distributions we use are d ~ U(0.001,10.0), C ~ U(200,1200), r ~ U(0.001,1.0), g ~ U(0.001,1.0).
# We begin by sampling from these distributions and simulating the process
trial_E = runif(1,1E2,1e3) #E= 10^5 cfu/ml * 0.22 ml/min
trial_l_3_1 = runif(1,1e-3,1e-1)
trial_l_3_2 = runif(1,1e-3,1e-1)
trial_l_6_1 = runif(1,1e-3,1e-1)
trial_l_6_2 = runif(1,1e-3,1e-1)
total_trials=total_trials+1.0
#print(total_trials)
parameters_3_1=c(E=trial_E,
l_3_1=trial_l_3_1)
parameters_3_2=c(E=trial_E,
l_3_2=trial_l_3_2)
parameters_6_1=c(E=trial_E,
l_6_1=trial_l_6_1)
parameters_6_2=c(E=trial_E,
l_6_2=trial_l_6_2)
#Learn data from 3_1
one_run = C_star(parameters = parameters_3_1)
euclidean_distance = abs(dist(rbind(one_run,data_M_3_1)))
#Learn data from 3_2
one_run = C_star(parameters = parameters_3_2)
euclidean_distance = abs(dist(rbind(one_run,data_M_3_2)))+euclidean_distance
#Learn data from 6_1
one_run = C_star(parameters = parameters_6_1)
euclidean_distance = abs(dist(rbind(one_run,data_M_6_1)))+euclidean_distance
#Learn data from 6_2
one_run = C_star(parameters = parameters_6_2)
euclidean_distance = abs(dist(rbind(one_run,data_M_6_2)))+euclidean_distance
# parameters <- c(C = trial_C, d = trial_d, g=trial_g,r=trial_r); #For C code
# one_run = deterministic_run(precision,initial_contamination,parameters)#
# Now we find the Euclidean distance between the simulated output and the
# experimental results. delta is the threshold that the Euclidean distance
# must be less than for us to accept the trial parameters into our sample.
delta = 10000#dictates distance
#Distance(one_run, experimental_data,s)# #Distance(one_run, experimental_data,s)#_noP2)
#print(euclidean_distance)# print(parameter_sample,euclidean_distance)
#print(total_trials)
if (euclidean_distance < delta){
#parameter_sample = parameter_sample[!is.na(parameter_sample)];
parameter_sample=rbind(parameter_sample, c(trial_E,trial_l_3_1,trial_l_3_2,trial_l_6_1,trial_l_6_1))
distances=rbind(distances,euclidean_distance)
accepted_trials=accepted_trials+1.0
print(paste0("Trial number accepted: ",accepted_trials))
}
#else{
#  print(euclidean_distance)
#  }
}
parameter_sample<-parameter_sample[order(distances), ]
parameter_sample<-parameter_sample%>%as.data.frame()#%>%set_colnames(c("r", "C", "d","g","l"))
colnames(parameter_sample)<-c("E", "l_3_1","l_3_2","l_6_1","l_6_2")
# return(parameter_sample)
print(paste("Summary of distances: ",distances %>% summary()))
print(paste("Percentage of accepted trials: ",accepted_trials/total_trials*100))
parameter_sample %>%
pivot_longer(c(E,l_3_1,l_3_2,l_6_1,l_6_2),names_to="Parameter") %>%
filter(Parameter!="E") %>%
# df_tidy<-gather(parameter_sample[,-5], Parameter, value)
ggplot(aes(x=value))+
geom_histogram(fill="#69b3a2",bins = 20,colour="gray")+
ggpubr::theme_pubclean()+
scale_x_continuous(limits = c(0,2))+
facet_wrap(~Parameter,ncol = 2,scales = "free")
ggpubr::ggarrange(a,b,nrow = 2)
pacman::p_load(dplyr,readxl,tidyr,ggplot2,deSolve)
df <- read_xlsx(path = "../data/chamber_expt_data.xlsx",sheet = 1) %>% janitor::clean_names()
df %>%
rename("position"="position_air_inlet_1_or_outlet_2","ach"="ach_3_or_6",
"air"="air_load_cfu_m3",
"surface"="surface_load_cfu_m_2_h_1") %>%
mutate(position=as.factor(position),
ach=as.factor(ach)) %>%
mutate(repeticion=rep(rep(1:12,each=5),2))->df
df %>%
group_by(ach,position,time_min) %>%
summarise(M=mean(air,na.rm=TRUE),S=sd(air,na.rm=TRUE)) -> expt_data
expt_data %>%
filter(ach==3 & position==1) %>%
pull(M) ->data_M_3_1
expt_data %>%
filter(ach==3 & position==1) %>%
pull(S) ->data_S_3_1
expt_data %>%
filter(ach==6& position==1) %>%
pull(M) ->data_M_6_1
expt_data %>%
filter(ach==6& position==1) %>%
pull(S) ->data_S_6_1
expt_data %>%
filter(ach==3 & position==2) %>%
pull(M) ->data_M_3_2
expt_data %>%
filter(ach==3 & position==2) %>%
pull(S) ->data_S_3_2
expt_data %>%
filter(ach==6& position==2) %>%
pull(M) ->data_M_6_2
expt_data %>%
filter(ach==6& position==2) %>%
pull(S) ->data_S_6_2
pacman::p_load(dplyr,readxl,tidyr,ggplot2,deSolve)
df <- read_xlsx(path = "../data/chamber_expt_data.xlsx",sheet = 1) %>% janitor::clean_names()
df %>%
rename("position"="position_air_inlet_1_or_outlet_2","ach"="ach_3_or_6",
"air"="air_load_cfu_m3",
"surface"="surface_load_cfu_m_2_h_1") %>%
mutate(position=as.factor(position),
ach=as.factor(ach)) %>%
mutate(repeticion=rep(rep(1:12,each=5),2))->df
df %>%
group_by(ach,position,time_min) %>%
summarise(M=mean(air,na.rm=TRUE),S=sd(air,na.rm=TRUE)) -> expt_data
expt_data %>%
filter(ach==3 & position==1) %>%
pull(M) ->data_M_3_1
expt_data %>%
filter(ach==3 & position==1) %>%
pull(S) ->data_S_3_1
expt_data %>%
filter(ach==6& position==1) %>%
pull(M) ->data_M_6_1
expt_data %>%
filter(ach==6& position==1) %>%
pull(S) ->data_S_6_1
expt_data %>%
filter(ach==3 & position==2) %>%
pull(M) ->data_M_3_2
expt_data %>%
filter(ach==3 & position==2) %>%
pull(S) ->data_S_3_2
expt_data %>%
filter(ach==6& position==2) %>%
pull(M) ->data_M_6_2
expt_data %>%
filter(ach==6& position==2) %>%
pull(S) ->data_S_6_2
C_star <- function(parameters){
E=parameters[[1]]
l=parameters[[2]]
C=E/(32.25*l)
return(rep(C,5))
}
1e-3
1.5/3600
1.5/3600
0.1/3600
# set.seed(seed = TRUE)
.Random.seed <- a
#set up empty distances vector
distances<-c()
precision=5000 #this is delta t
sample_size = 200
#parameter_sample <- c()
parameter_sample<- matrix(data=NA,nrow=1,ncol=5)
total_trials=0  #Starts the counter of run trials
accepted_trials=0 #Starts the counter for accepted trial numbers, don't change
#Loop to sample values until met the sample size
while (NROW(parameter_sample) <= sample_size){
#foreach(total_trials=1:2, .packages=c("deSolve")) %dopar% {
# The prior distributions we use are d ~ U(0.001,10.0), C ~ U(200,1200), r ~ U(0.001,1.0), g ~ U(0.001,1.0).
# We begin by sampling from these distributions and simulating the process
trial_E = runif(1,1E2,8e2) #E= 10^5 cfu/ml * 0.22 ml/min
trial_l_3_1 = runif(1,1e-5,1e-1)
trial_l_3_2 = runif(1,1e-5,1e-1)
trial_l_6_1 = runif(1,1e-5,1e-1)
trial_l_6_2 = runif(1,1e-5,1e-1)
total_trials=total_trials+1.0
#print(total_trials)
parameters_3_1=c(E=trial_E,
l_3_1=trial_l_3_1)
parameters_3_2=c(E=trial_E,
l_3_2=trial_l_3_2)
parameters_6_1=c(E=trial_E,
l_6_1=trial_l_6_1)
parameters_6_2=c(E=trial_E,
l_6_2=trial_l_6_2)
#Learn data from 3_1
one_run = C_star(parameters = parameters_3_1)
euclidean_distance = abs(dist(rbind(one_run,data_M_3_1)))
#Learn data from 3_2
one_run = C_star(parameters = parameters_3_2)
euclidean_distance = abs(dist(rbind(one_run,data_M_3_2)))+euclidean_distance
#Learn data from 6_1
one_run = C_star(parameters = parameters_6_1)
euclidean_distance = abs(dist(rbind(one_run,data_M_6_1)))+euclidean_distance
#Learn data from 6_2
one_run = C_star(parameters = parameters_6_2)
euclidean_distance = abs(dist(rbind(one_run,data_M_6_2)))+euclidean_distance
# parameters <- c(C = trial_C, d = trial_d, g=trial_g,r=trial_r); #For C code
# one_run = deterministic_run(precision,initial_contamination,parameters)#
# Now we find the Euclidean distance between the simulated output and the
# experimental results. delta is the threshold that the Euclidean distance
# must be less than for us to accept the trial parameters into our sample.
delta = 10000#dictates distance
#Distance(one_run, experimental_data,s)# #Distance(one_run, experimental_data,s)#_noP2)
#print(euclidean_distance)# print(parameter_sample,euclidean_distance)
#print(total_trials)
if (euclidean_distance < delta){
#parameter_sample = parameter_sample[!is.na(parameter_sample)];
parameter_sample=rbind(parameter_sample, c(trial_E,trial_l_3_1,trial_l_3_2,trial_l_6_1,trial_l_6_1))
distances=rbind(distances,euclidean_distance)
accepted_trials=accepted_trials+1.0
print(paste0("Trial number accepted: ",accepted_trials))
}
#else{
#  print(euclidean_distance)
#  }
}
parameter_sample<-parameter_sample[order(distances), ]
parameter_sample<-parameter_sample%>%as.data.frame()#%>%set_colnames(c("r", "C", "d","g","l"))
colnames(parameter_sample)<-c("E", "l_3_1","l_3_2","l_6_1","l_6_2")
# return(parameter_sample)
print(paste("Summary of distances: ",distances %>% summary()))
print(paste("Percentage of accepted trials: ",accepted_trials/total_trials*100))
write.csv(parameter_sample,"../Data/parameter_sample_air.csv",row.names = FALSE)
parameter_sample %>%
pivot_longer(c(E,l_3_1,l_3_2,l_6_1,l_6_2),names_to="Parameter") %>%
filter(Parameter!="E") %>%
# df_tidy<-gather(parameter_sample[,-5], Parameter, value)
ggplot(aes(x=value))+
geom_histogram(fill="#69b3a2",bins = 20,colour="gray")+
ggpubr::theme_pubclean()+
scale_x_continuous(limits = c(0,2))+
facet_wrap(~Parameter,ncol = 2,scales = "free")
parameter_sample %>%
pivot_longer(c(E,l_3_1,l_3_2,l_6_1,l_6_2),names_to="Parameter") %>%
filter(Parameter!="E") %>%
# df_tidy<-gather(parameter_sample[,-5], Parameter, value)
ggplot(aes(x=value))+
geom_histogram(fill="#69b3a2",bins = 20,colour="gray")+
ggpubr::theme_pubclean()+
scale_x_continuous(limits = c(0,2e-2))+
facet_wrap(~Parameter,ncol = 2,scales = "free")
parameter_sample %>%
summary()
df <- data.frame(HEPA=rnorm(1000,0,.1),CONTROL=rnorm(rnorm(1000,0,0.02)+0.01))
df %>% pivot_longer(c(HEPA,CONTROL))
df %>% pivot_longer(c(HEPA,CONTROL)) %>% ggplot()+
geom_violin(aes(x=name,y=value,fill=name),alpha=0.3)+xlab("Group")+ylab("Some value [ppm]")+scale_fill_brewer(palette="Set1")+ hrbrthemes::theme_ipsum()
geom_violin(aes(x=name,y=value,fill=name),alpha=0.3)+xlab("Group")+ylab("Some value [ppm]")+scale_fill_brewer(palette="Set2")+ hrbrthemes::theme_ipsum()
geom_violin(aes(x=name,y=value,fill=name),alpha=0.3)+xlab("Group")+ylab("Some value [ppm]")+scale_fill_brewer(palette="Set2")+ hrbrthemes::theme_ipsum()
